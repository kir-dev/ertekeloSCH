// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MODERATOR
  USER
}

enum Major {
  // Software Engineer
  SE
  // Electrical Engineer
  EE
  BPROF
}

model User {
  authSchId     String          @id
  // email         String          @unique
  name          String
  role          Role            @default(USER)
  major         Major?
  desc          String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  ProfRating    ProfRating[]
  SpecRating    SpecRating[]
  SubjectRating SubjectRating[]
}

enum Title {
  PROF // Professzor
  ASSOC_PROF // Docens
  ASST_PROF // Adjunktus
  LECTURER // Óraadó
}

model Prof {
  id                 String       @id @default(uuid())
  name               String
  desc               String?
  title              Title
  presentationRating Float        @default(0)
  knowledgeRating    Float        @default(0)
  helpfulnessRating  Float        @default(0)
  pfp                String?
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  subjects           Subject[]
  // teacher *
  ProfRating         ProfRating[]
  Department         Department?  @relation(fields: [departmentId], references: [id])
  departmentId       Int?
}

model SubjectRating {
  id               Int          @id @default(autoincrement())
  desc             String
  isAnon           Boolean
  difficultyRating Int          @default(0) // Teljesíthetőség
  interestRating   Int          @default(0) // Érdekesség
  usefulnessRating Int          @default(0) // Hasznosság
  author           User         @relation(fields: [userId], references: [authSchId])
  userId           String
  ProfRating       ProfRating[]
  Subject          Subject?     @relation(fields: [subjectId], references: [id])
  subjectId        Int?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
}

model ProfRating {
  id                 Int           @id @default(autoincrement())
  desc               String
  isAnon             Boolean
  presentationRating Int           @default(0) // Előadásmód
  knowledgeRating    Int           @default(0) // Tudás
  helpfulnessRating  Int           @default(0) // Segítőkészség
  author             User          @relation(fields: [userId], references: [authSchId])
  userId             String
  prof               Prof          @relation(fields: [profId], references: [id])
  profId             String
  subjectRating      SubjectRating @relation(fields: [subjectRatingId], references: [id])
  subjectRatingId    Int
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
}

model SpecRating {
  id               Int      @id @default(autoincrement())
  desc             String
  isAnon           Boolean
  difficultyRating Int      @default(0) // Teljesíthetőség
  interestRating   Int      @default(0) // Érdekesség
  usefulnessRating Int      @default(0) // Hasznosság
  author           User     @relation(fields: [userId], references: [authSchId])
  userId           String
  spec             Spec     @relation(fields: [specId], references: [id])
  specId           Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Department {
  id         Int       @id @default(autoincrement())
  name       String
  desc       String
  professors Prof[]
  subjects   Subject[]
  Spec       Spec[]
}

model Spec {
  id           Int          @id @default(autoincrement())
  area         String
  department   Department   @relation(fields: [departmentId], references: [id])
  departmentId Int
  subjects     Subject[]
  SpecRating   SpecRating[]
}

model Subject {
  id            Int             @id @default(autoincrement())
  name          String
  desc          String
  subjectCode   String
  department    Department      @relation(fields: [departmentId], references: [id])
  departmentId  Int
  SubjectRating SubjectRating[]
  Spec          Spec?           @relation(fields: [specId], references: [id])
  specId        Int?
  Prof          Prof[]
}

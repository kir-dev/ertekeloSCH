// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MODERATOR
  USER
}

enum Major {
  // Software Engineer
  SE
  // Electrical Engineer
  EE
  BPROF
}

model User {
  authSchId      String              @id
  // email         String          @unique
  name           String
  role           Role                @default(USER)
  major          Major?
  desc           String?
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  profRatings    ProfRating[]
  specRatings    SpecRating[]
  subjectRatings SubjectRating[]
  SubjectVote    SubjectRatingVote[]
  ProfRatingVote ProfRatingVote[]
}

enum Title {
  PROF // Professzor
  ASSOC_PROF // Docens
  ASST_PROF // Adjunktus
  LECTURER // Óraadó
}

model Prof {
  id                 String       @id @default(uuid())
  name               String
  desc               String?
  title              Title
  presentationRating Float        @default(0)
  knowledgeRating    Float        @default(0)
  helpfulnessRating  Float        @default(0)
  pfp                String?
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  profRatings        ProfRating[]
  department         Department?  @relation(fields: [departmentId], references: [id])
  departmentId       Int?
  teaches            Teaches[]
}

model SubjectRating {
  id               Int                 @id @default(autoincrement())
  desc             String
  isAnon           Boolean
  difficultyRating Int                 @default(0) // Teljesíthetőség
  interestRating   Int                 @default(0) // Érdekesség
  usefulnessRating Int                 @default(0) // Hasznosság
  author           User                @relation(fields: [userId], references: [authSchId])
  userId           String
  profRatings      ProfRating[]
  subject          Subject?            @relation(fields: [subjectId], references: [id])
  subjectId        Int?
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  votes            SubjectRatingVote[]
}

model ProfRating {
  id                 Int              @id @default(autoincrement())
  desc               String
  isAnon             Boolean
  presentationRating Int              @default(0) // Előadásmód
  knowledgeRating    Int              @default(0) // Tudás
  helpfulnessRating  Int              @default(0) // Segítőkészség
  author             User             @relation(fields: [userId], references: [authSchId])
  userId             String
  prof               Prof             @relation(fields: [profId], references: [id])
  profId             String
  subjectRating      SubjectRating    @relation(fields: [subjectRatingId], references: [id])
  subjectRatingId    Int
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  votes              ProfRatingVote[]
}

model SpecRating {
  id               Int      @id @default(autoincrement())
  desc             String
  isAnon           Boolean
  difficultyRating Int      @default(0) // Teljesíthetőség
  interestRating   Int      @default(0) // Érdekesség
  usefulnessRating Int      @default(0) // Hasznosság
  author           User     @relation(fields: [userId], references: [authSchId])
  userId           String
  spec             Spec     @relation(fields: [specId], references: [id])
  specId           Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Department {
  id         Int       @id @default(autoincrement())
  name       String
  desc       String
  professors Prof[]
  subjects   Subject[]
  specs      Spec[]
}

model Spec {
  id           Int          @id @default(autoincrement())
  area         String
  department   Department   @relation(fields: [departmentId], references: [id])
  departmentId Int
  subjects     Subject[]
  ratings      SpecRating[]
}

model Subject {
  id               Int                 @id @default(autoincrement())
  name             String
  desc             String
  subjectCode      String
  difficultyRating Int                 @default(0) // Teljesíthetőség
  interestRating   Int                 @default(0) // Érdekesség
  usefulnessRating Int                 @default(0) //
  department       Department          @relation(fields: [departmentId], references: [id])
  departmentId     Int
  ratings          SubjectRating[]
  spec             Spec?               @relation(fields: [specId], references: [id])
  specId           Int?
  teaches          Teaches[]
  votes            SubjectRatingVote[]
}

model Teaches {
  id        Int     @id @default(autoincrement())
  profId    String
  subjectId Int
  prof      Prof    @relation(fields: [profId], references: [id])
  subject   Subject @relation(fields: [subjectId], references: [id])

  @@index([subjectId, profId])
}

model SubjectRatingVote {
  id        Int           @id @default(autoincrement())
  isUpvote  Boolean
  author    User          @relation(fields: [userId], references: [authSchId])
  userId    String
  rating    SubjectRating @relation(fields: [ratingId], references: [id])
  ratingId  Int
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  Subject   Subject?      @relation(fields: [subjectId], references: [id])
  subjectId Int?
}

model ProfRatingVote {
  id        Int        @id @default(autoincrement())
  isUpvote  Boolean
  author    User       @relation(fields: [userId], references: [authSchId])
  userId    String
  rating    ProfRating @relation(fields: [ratingId], references: [id])
  ratingId  Int
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}
